Вот полный код для .NET MAUI (NET 8.0) приложения, реализующего все задания:

### 1. MainPage.xaml
```xml
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="LabWork39.MainPage"
             Title="Главная">
    <ScrollView>
        <VerticalStackLayout Spacing="20" Padding="30">
            <Label Text="Лабораторная работа 39" 
                   FontSize="Title" HorizontalOptions="Center"/>
            
            <Button Text="Задание 3.1" Clicked="OnTaskClicked" CommandParameter="1"/>
            <Button Text="Задание 3.2" Clicked="OnTaskClicked" CommandParameter="2"/>
            <Button Text="Задание 3.3" Clicked="OnTaskClicked" CommandParameter="3"/>
            <Button Text="Задание 3.4" Clicked="OnTaskClicked" CommandParameter="4"/>
            <Button Text="Задание 3.5" Clicked="OnTaskClicked" CommandParameter="5"/>
        </VerticalStackLayout>
    </ScrollView>
</ContentPage>
```

### 2. MainPage.xaml.cs
```csharp
using Microsoft.Maui.Controls;

namespace LabWork39
{
    public partial class MainPage : ContentPage
    {
        public MainPage()
        {
            InitializeComponent();
        }

        private async void OnTaskClicked(object sender, EventArgs e)
        {
            if (sender is Button button && button.CommandParameter is string param)
            {
                Page page = param switch
                {
                    "1" => new Task1Page(),
                    "2" => new Task2Page(),
                    "3" => new Task3Page(),
                    "4" => new Task4Page(),
                    "5" => new Task5Page(),
                    _ => null
                };

                if (page != null)
                    await Navigation.PushAsync(page);
            }
        }
    }
}
```

### 3. TaskBasePage.xaml (Базовый шаблон)
```xml
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="LabWork39.TaskBasePage"
             Title="{Binding Title}">
    <ContentPage.ToolbarItems>
        <ToolbarItem Text="Назад" Clicked="OnBackClicked" />
    </ContentPage.ToolbarItems>
    
    <ListView x:Name="listView">
        <ListView.ItemTemplate>
            <DataTemplate>
                <ViewCell>
                    <VerticalStackLayout Padding="10">
                        <Label Text="{Binding DisplayText}" 
                               FontAttributes="Bold" 
                               FontSize="16"/>
                        <Label Text="{Binding DisplayDetail}" 
                               TextColor="Gray"
                               FontSize="14"/>
                    </VerticalStackLayout>
                </ViewCell>
            </DataTemplate>
        </ListView.ItemTemplate>
    </ListView>
</ContentPage>
```

### 4. TaskBasePage.xaml.cs
```csharp
using Microsoft.Maui.Controls;

namespace LabWork39
{
    public partial class TaskBasePage : ContentPage
    {
        public string Title { get; set; } = "Задание";

        public TaskBasePage()
        {
            InitializeComponent();
            BindingContext = this;
        }

        private async void OnBackClicked(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
    }
}
```

### 5. Task1Page.xaml.cs (Задание 3.1)
```csharp
using System.IO;
using System.Linq;

namespace LabWork39
{
    public partial class Task1Page : TaskBasePage
    {
        public Task1Page()
        {
            Title = "Задание 3.1: Группировка по расширению";
            RunTask();
        }

        private void RunTask()
        {
            var directory = new DirectoryInfo(FileSystem.AppDataDirectory);
            var files = directory.GetFiles("*", SearchOption.AllDirectories).AsEnumerable();

            var query = files
                .GroupBy(f => string.IsNullOrEmpty(f.Extension) ? "Без расширения" : f.Extension.ToLower())
                .Select(g => new
                {
                    DisplayText = g.Key,
                    DisplayDetail = $"Файлов: {g.Count()}, " +
                                   $"Размер: {g.Sum(f => f.Length):n0} байт, " +
                                   $"Мин: {g.Min(f => f.Length):n0}, " +
                                   $"Макс: {g.Max(f => f.Length):n0}"
                })
                .ToList();

            listView.ItemsSource = query;
        }
    }
}
```

### 6. Task2Page.xaml.cs (Задание 3.2)
```csharp
using System.IO;
using System.Linq;

namespace LabWork39
{
    public partial class Task2Page : TaskBasePage
    {
        public Task2Page()
        {
            Title = "Задание 3.2: Группировка по дате";
            RunTask();
        }

        private void RunTask()
        {
            var directory = new DirectoryInfo(FileSystem.AppDataDirectory);
            var files = directory.GetFiles("*", SearchOption.AllDirectories).AsEnumerable();

            var query = files
                .GroupBy(f => new { f.CreationTime.Year, f.CreationTime.Month })
                .Select(g => new
                {
                    DisplayText = $"{g.Key.Year}-{g.Key.Month:D2}",
                    DisplayDetail = $"Файлов: {g.Count()}"
                })
                .OrderByDescending(x => x.DisplayText)
                .ToList();

            listView.ItemsSource = query;
        }
    }
}
```

### 7. Task3Page.xaml.cs (Задание 3.3)
```csharp
using System.IO;
using System.Linq;

namespace LabWork39
{
    public partial class Task3Page : TaskBasePage
    {
        public Task3Page()
        {
            Title = "Задание 3.3: Объединение файлов и папок";
            RunTask();
        }

        private void RunTask()
        {
            var directory = new DirectoryInfo(FileSystem.AppDataDirectory);
            var files = directory.GetFiles("*", SearchOption.AllDirectories).AsEnumerable();
            var directories = directory.GetDirectories("*", SearchOption.AllDirectories).AsEnumerable();

            var query = files.Select(f => new
                {
                    Name = f.Name,
                    Path = f.FullName,
                    Created = f.CreationTime
                })
                .Union(directories.Select(d => new
                {
                    Name = d.Name,
                    Path = d.FullName,
                    Created = d.CreationTime
                }))
                .Select(item => new
                {
                    DisplayText = item.Name,
                    DisplayDetail = $"Путь: {item.Path}\nСоздан: {item.Created:g}"
                })
                .ToList();

            listView.ItemsSource = query;
        }
    }
}
```

### 8. Task4Page.xaml.cs (Задание 3.4)
```csharp
using System;
using System.IO;
using System.Linq;

namespace LabWork39
{
    public partial class Task4Page : TaskBasePage
    {
        public Task4Page()
        {
            Title = "Задание 3.4: Файлы в сегодняшних папках";
            RunTask();
        }

        private void RunTask()
        {
            var directory = new DirectoryInfo(FileSystem.AppDataDirectory);
            var files = directory.GetFiles("*", SearchOption.AllDirectories).AsEnumerable();
            var directories = directory.GetDirectories("*", SearchOption.AllDirectories).AsEnumerable();

            var today = DateTime.Today;
            var query = directories
                .Where(d => d.CreationTime.Date == today)
                .Join(files,
                    d => d.FullName,
                    f => f.DirectoryName,
                    (d, f) => new
                    {
                        DisplayText = f.Name,
                        DisplayDetail = $"В папке: {d.Name}\nПуть: {f.FullName}"
                    })
                .ToList();

            listView.ItemsSource = query;
        }
    }
}
```

### 9. Task5Page.xaml.cs (Задание 3.5)
```csharp
using System.IO;
using System.Linq;

namespace LabWork39
{
    public partial class Task5Page : TaskBasePage
    {
        public Task5Page()
        {
            Title = "Задание 3.5: Файлы в папках";
            RunTask();
        }

        private void RunTask()
        {
            var directory = new DirectoryInfo(FileSystem.AppDataDirectory);
            var files = directory.GetFiles("*", SearchOption.AllDirectories).AsEnumerable();
            var directories = directory.GetDirectories("*", SearchOption.AllDirectories).AsEnumerable();

            var query = directories
                .GroupJoin(files,
                    d => d.FullName,
                    f => f.DirectoryName,
                    (d, fileGroup) => new
                    {
                        DisplayText = d.Name,
                        DisplayDetail = $"Путь: {d.FullName}\nФайлов: {fileGroup.Count()}"
                    })
                .ToList();

            listView.ItemsSource = query;
        }
    }
}
```

### 10. App.xaml.cs
```csharp
using Microsoft.Maui.Controls;

namespace LabWork39
{
    public partial class App : Application
    {
        public App()
        {
            InitializeComponent();
            MainPage = new NavigationPage(new MainPage());
        }
    }
}
```

### Особенности реализации:
1. **Платформонезависимый доступ к данным**:
   - Используется `FileSystem.AppDataDirectory` для получения пути к папке приложения
   - Работает на всех платформах (Windows, Android, iOS, macOS)

2. **Архитектура**:
   - Базовый класс `TaskBasePage` для общих элементов UI
   - Навигация через `NavigationPage`
   - Динамическое создание страниц с заданиями

3. **Оптимизация производительности**:
   - Использование `SearchOption.AllDirectories` только для демонстрации
   - В реальных приложениях следует использовать асинхронные вызовы

4. **Форматирование данных**:
   - Читабельное форматирование размеров файлов
   - Группировка по месяцам с сортировкой
   - Многострочное отображение детальной информации

5. **Безопасность**:
   - Работа только в пределах sandbox приложения
   - Не требует дополнительных разрешений на мобильных платформах

### Тестирование:
1. Создайте тестовые файлы и папки в директории приложения
2. Проверьте работу каждого задания:
   - 3.1: Группировка по расширениям файлов
   - 3.2: Статистика по месяцам создания
   - 3.3: Объединенный список файлов и папок
   - 3.4: Файлы в папках, созданных сегодня
   - 3.5: Количество файлов в каждой папке

Приложение полностью соответствует требованиям задания и использует современные практики разработки .NET MAUI приложений.