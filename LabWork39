### Решение для проекта LabWork39

#### Главная страница (MainPage.xaml.cs)
```csharp
using Xamarin.Forms;

namespace LabWork39
{
    public partial class MainPage : ContentPage
    {
        public MainPage()
        {
            InitializeComponent();
            CreateNavigationButtons();
        }

        private void CreateNavigationButtons()
        {
            var layout = new StackLayout();

            string[] tasks = { "Задание 3.1", "Задание 3.2", "Задание 3.3", "Задание 3.4", "Задание 3.5" };
            foreach (var task in tasks)
            {
                var button = new Button { Text = task };
                button.Clicked += (s, e) => NavigateToTask(task.Replace(" ", ""));
                layout.Children.Add(button);
            }

            Content = new ScrollView { Content = layout };
        }

        private void NavigateToTask(string taskName)
        {
            Page page = taskName switch
            {
                "Задание3.1" => new Task1Page(),
                "Задание3.2" => new Task2Page(),
                "Задание3.3" => new Task3Page(),
                "Задание3.4" => new Task4Page(),
                "Задание3.5" => new Task5Page(),
                _ => null
            };

            if (page != null)
                Navigation.PushAsync(page);
        }
    }
}
```

#### Страница задания 3.1 (Task1Page.xaml.cs)
```csharp
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Xamarin.Forms;

namespace LabWork39
{
    public partial class Task1Page : ContentPage
    {
        public Task1Page()
        {
            InitializeComponent();
            RunTask();
        }

        private void RunTask()
        {
            var directory = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData));
            var files = directory.GetFiles("*", SearchOption.AllDirectories).AsEnumerable();

            var query = files
                .GroupBy(f => f.Extension.ToLower())
                .Select(g => new
                {
                    Extension = string.IsNullOrEmpty(g.Key) ? "Без расширения" : g.Key,
                    TotalSize = g.Sum(f => f.Length),
                    MinSize = g.Min(f => f.Length),
                    MaxSize = g.Max(f => f.Length),
                    FileCount = g.Count()
                })
                .ToList();

            listView.ItemsSource = query;
        }
    }
}
```

#### Страница задания 3.2 (Task2Page.xaml.cs)
```csharp
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Xamarin.Forms;

namespace LabWork39
{
    public partial class Task2Page : ContentPage
    {
        public Task2Page()
        {
            InitializeComponent();
            RunTask();
        }

        private void RunTask()
        {
            var directory = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData));
            var files = directory.GetFiles("*", SearchOption.AllDirectories).AsEnumerable();

            var query = files
                .GroupBy(f => new { f.CreationTime.Year, f.CreationTime.Month })
                .Select(g => new
                {
                    Year = g.Key.Year,
                    Month = g.Key.Month,
                    FileCount = g.Count()
                })
                .OrderBy(r => r.Year)
                .ThenBy(r => r.Month)
                .ToList();

            listView.ItemsSource = query;
        }
    }
}
```

#### Страница задания 3.3 (Task3Page.xaml.cs)
```csharp
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Xamarin.Forms;

namespace LabWork39
{
    public partial class Task3Page : ContentPage
    {
        public Task3Page()
        {
            InitializeComponent();
            RunTask();
        }

        private void RunTask()
        {
            var directory = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData));
            var files = directory.GetFiles("*", SearchOption.AllDirectories).AsEnumerable();
            var directories = directory.GetDirectories("*", SearchOption.AllDirectories).AsEnumerable();

            var query = files.Select(f => new
                {
                    Name = f.Name,
                    Path = f.FullName,
                    Created = f.CreationTime
                })
                .Union(directories.Select(d => new
                {
                    Name = d.Name,
                    Path = d.FullName,
                    Created = d.CreationTime
                }))
                .ToList();

            listView.ItemsSource = query;
        }
    }
}
```

#### Страница задания 3.4 (Task4Page.xaml.cs)
```csharp
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Xamarin.Forms;

namespace LabWork39
{
    public partial class Task4Page : ContentPage
    {
        public Task4Page()
        {
            InitializeComponent();
            RunTask();
        }

        private void RunTask()
        {
            var directory = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData));
            var files = directory.GetFiles("*", SearchOption.AllDirectories).AsEnumerable();
            var directories = directory.GetDirectories("*", SearchOption.AllDirectories).AsEnumerable();

            var today = DateTime.Today;
            var query = directories
                .Where(d => d.CreationTime.Date == today)
                .Join(files,
                    d => d.FullName,
                    f => f.DirectoryName,
                    (d, f) => f.Name)
                .Distinct()
                .ToList();

            listView.ItemsSource = query;
        }
    }
}
```

#### Страница задания 3.5 (Task5Page.xaml.cs)
```csharp
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Xamarin.Forms;

namespace LabWork39
{
    public partial class Task5Page : ContentPage
    {
        public Task5Page()
        {
            InitializeComponent();
            RunTask();
        }

        private void RunTask()
        {
            var directory = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData));
            var files = directory.GetFiles("*", SearchOption.AllDirectories).AsEnumerable();
            var directories = directory.GetDirectories("*", SearchOption.AllDirectories).AsEnumerable();

            var query = directories
                .GroupJoin(files,
                    d => d.FullName,
                    f => f.DirectoryName,
                    (d, fileGroup) => new
                    {
                        DirectoryName = d.FullName,
                        FileCount = fileGroup.Count()
                    })
                .ToList();

            listView.ItemsSource = query;
        }
    }
}
```

### XAML-шаблон для страниц заданий (TaskXPage.xaml)
```xml
<?xml version="1.0" encoding="utf-8"?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="LabWork39.TaskXPage">
    <ContentPage.Content>
        <ListView x:Name="listView">
            <ListView.ItemTemplate>
                <DataTemplate>
                    <TextCell Text="{Binding}" Detail="{Binding .}"/>
                </DataTemplate>
            </ListView.ItemTemplate>
        </ListView>
    </ContentPage.Content>
</ContentPage>
```

### Особенности реализации:
1. **Платформозависимые пути**:
   - Используется `Environment.SpecialFolder.LocalApplicationData`
   - Для Android/iOS требуется разрешение `READ_EXTERNAL_STORAGE`

2. **Обработка данных**:
   - Группировка по расширениям (с обработкой пустых расширений)
   - Фильтрация по текущей дате
   - Объединение файлов и директорий
   - Соединение данных через Join/GroupJoin

3. **Производительность**:
   - `SearchOption.AllDirectories` может быть медленным для больших директорий
   - Рекомендуется использовать `Task.Run()` для выгрузки операций в фоновый поток

4. **Отображение данных**:
   - Универсальный шаблон для вывода любых объектов
   - Автоматическое форматирование через `ToString()`

Для тестирования рекомендуется использовать эмулятор с предварительно созданными тестовыми файлами и директориями.